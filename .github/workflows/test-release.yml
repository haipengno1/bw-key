name: Test Release Process

on:
  workflow_dispatch:
    inputs:
      dry_run:
        description: 'Dry run (no actual release)'
        required: true
        default: 'true'
        type: boolean

env:
  CARGO_INCREMENTAL: 0
  CARGO_TERM_COLOR: always
  RUSTFLAGS: -A dead_code
  RUST_BACKTRACE: 1
  CARGO_PROFILE_RELEASE_LTO: true

defaults:
  run:
    shell: bash

jobs:
  test-build:
    if: github.repository_owner == 'haipengno1'
    runs-on: ubuntu-22.04
    steps:
      - uses: actions/checkout@v4
      
      - name: Test Release Creation
        if: inputs.dry_run
        run: |
          echo "Testing release creation with changelog:"
          cat CHANGELOG.md
          echo "Would create release based on the above changelog"

  test-assets:
    name: Test ${{ matrix.target }}
    if: github.repository_owner == 'haipengno1'
    needs:
      - test-build
    strategy:
      fail-fast: false
      matrix:
        include:
          - target: x86_64-unknown-linux-gnu
            os: ubuntu-22.04
          - target: aarch64-unknown-linux-gnu
            os: ubuntu-22.04
          - target: aarch64-apple-darwin
            os: macos-13
          - target: x86_64-apple-darwin
            os: macos-13
          - target: x86_64-pc-windows-msvc
            os: windows-2022
    runs-on: ${{ matrix.os }}
    steps:
      - uses: actions/checkout@v4

      - name: Install dependencies
        run: |
          if [ "$RUNNER_OS" == "Windows" ]; then
            echo "VCPKG_ROOT=$VCPKG_INSTALLATION_ROOT" >> $GITHUB_ENV
            echo "RUSTFLAGS=$RUSTFLAGS -Ctarget-feature=+crt-static" >> $GITHUB_ENV
            vcpkg update
            vcpkg install openssl:x64-windows-static
          elif [ "$RUNNER_OS" == "Linux" ]; then
            sudo apt-get update
            sudo apt-get install -y libssl-dev pkg-config
          fi

      - name: Install Rust
        uses: dtolnay/rust-toolchain@stable
        with:
          targets: ${{ matrix.target }}

      - name: Build Binary
        run: cargo build --release --target ${{ matrix.target }}

      - name: Test Binary Artifacts
        run: |
          echo "Testing binary for ${{ matrix.target }}"
          ls -l target/${{ matrix.target }}/release/
          if [ "$RUNNER_OS" == "Windows" ]; then
            echo "Would create zip archive for Windows"
          else
            echo "Would create tar archive for Unix"
          fi
